#!/usr/bin/env python

# Copyright (C) 2020 k4leg <python.bogdan@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""The command interface for the `anime_downloader` module."""

import os
from types import ModuleType

import click

from anime_downloader import library
from anime_downloader.exceptions import *
from anime_downloader.sites import sites

USER = os.getenv('USER')
PATH_TO_LOCK_FILE = f'/tmp/anime-downloader.{USER}.lock'

PATH_TO_CONFIG_DIR = os.path.expanduser('~/.config/anime-downloader')
try:
    os.mkdir(PATH_TO_CONFIG_DIR)
except FileExistsError:
    pass
PATH_TO_CONFIG = os.path.join(PATH_TO_CONFIG_DIR, 'config')
try:
    CONFIG = library.Config(os.path.expanduser(PATH_TO_CONFIG))
except NotEnoughArgumentsToInitializeError:
    CONFIG = library.Config(
        PATH_TO_CONFIG,
        path_to_db=os.path.join(PATH_TO_CONFIG_DIR, 'db'),
        path_to_downloads=os.popen('xdg-user-dir DOWNLOAD').read().rstrip(),
        site='animevost',
    )


def create_lock_file() -> None:
    if os.path.exists(PATH_TO_LOCK_FILE):
        raise AnotherInstanceAlreadyRunError
    open(PATH_TO_LOCK_FILE, 'x').close()


def remove_lock_file() -> None:
    os.remove(PATH_TO_LOCK_FILE)


def add_anime(site: ModuleType, path_to_db: str) -> None:
    search_query = site.SearchQuery(input("Enter your search query: "))
    for n, anime in enumerate(search_query, 1):
        title, link = anime.title, anime.link
        print(f"{n}. {title} ({link})")

    user_choice = int(input("Enter the number of anime: ")) - 1
    search_query[user_choice].save_to_db(path_to_db)


def remove_anime(path_to_db: str) -> None:
    library.print_db(path_to_db)

    anime_index_for_delete = int(
        input("Enter the release number you want to remove: ")
    ) - 1
    db = library.get_db(path_to_db)
    db[anime_index_for_delete].remove_from_db(path_to_db)


def download_anime_episodes(path_to_db: str, path_to_downloads: str) -> None:
    library.print_db(path_to_db)

    anime_index = int(
        input("Enter the release number for which you want to download the"
              + " episode(s): ")
    ) - 1
    anime = library.get_db(path_to_db)[anime_index]
    episode = input("Enter the episode(s) you want to download: ")
    try:
        episode = int(episode) if episode else None
        anime.playlist.download(episode, path_to_downloads)
    except ValueError:
        episode_start, episode_stop = [i for i in episode.split(':')]
        episode_start = int(episode_start) if episode_start else None
        episode_stop = int(episode_stop) if episode_stop else None
        anime.playlist.download_anime_episodes(
            episode_start, episode_stop, path_to_downloads
        )


def auto_download_anime_episodes(path_to_db: str, path_to_downloads: str) -> None:
    library.update_and_save_all_db(path_to_db)
    try:
        updated_anime = library.get_updated_anime_from_db(path_to_db)
    except NoUpdatedReleasesError:
        print("Nothing to do.")
        import sys
        sys.exit()
    for anime in updated_anime:
        title = anime.title
        print(f"Downloading the episode of the '{title}' release...")
        anime.playlist.download(downloads=path_to_downloads)


def print_recent_anime(site: ModuleType) -> None:
    try:
        recent_anime = site.get_recent_anime()
    except AttributeError:
        print("This site doesn't support this argument.")
    else:
        recent_anime.reverse()
        for n, anime in zip(range(len(recent_anime), 0, -1), recent_anime):
            title, link = anime.title, anime.link
            print(f"{n}. {title} ({link})")


def print_anime_sites() -> None:
    for n, site in enumerate(sites, 1):
        print(f"{n}. {site}")


@click.command()
@click.option("-a", "--add", is_flag=True, help="add a release to the DB")
@click.option("-r", "--remove", is_flag=True, help="remove release from DB")
@click.option("-d", "--download", is_flag=True, help="download episode(s)")
@click.option(
    "-ad",
    "--auto-download",
    is_flag=True,
    help="download the latest episodes of releases that have added episodes",
)
@click.option(
    "--path-to-downloads",
    type=str,
    default=CONFIG.path_to_downloads,
    help="configure the path to downloads",
)
@click.option("-lsdb", "--list-db", is_flag=True, help="print db")
@click.option(
    "--path-to-db",
    type=str,
    default=CONFIG.path_to_db,
    help="configure the path to the DB",
)
@click.option(
    "-lsrr",
    "--list-recent-anime",
    is_flag=True,
    help="print a list of recent anime (oldest to most recent)",
)
@click.option("--print-sites", is_flag=True, help="print sites")
@click.option(
    "--site",
    type=str,
    default=CONFIG.site,
    help="configure the site to download",
)
@click.option("--save", is_flag=True, help="save settings")
def main(
    add: bool,
    remove: bool,
    download: bool,
    auto_download: bool,
    path_to_downloads: str,
    list_db: bool,
    path_to_db: str,
    list_recent_anime: bool,
    print_sites: bool,
    site: str,
    save: bool,
) -> None:
    create_lock_file()

    try:
        path_to_db = os.path.expanduser(path_to_db)
        if save:
            if CONFIG.path_to_db != path_to_db:
                CONFIG.path_to_db = path_to_db
            if CONFIG.path_to_downloads != path_to_downloads:
                CONFIG.path_to_downloads = path_to_downloads
            if CONFIG.site != site:
                CONFIG.site = site
            CONFIG.save()

        if add:
            add_anime(sites[site], path_to_db)
        elif remove:
            remove_anime(path_to_db)
        elif download:
            download_anime_episodes(path_to_db, path_to_downloads)
        elif auto_download:
            auto_download_anime_episodes(path_to_db, path_to_downloads)
        elif list_db:
            library.print_db(CONFIG.path_to_db)
        elif list_recent_anime:
            print_recent_anime(sites[site])
        elif print_sites:
            print_anime_sites()
    except KeyError:
        print("This site is not supported.")
    finally:
        try:
            remove_lock_file()
        except FileNotFoundError:
            print(
                f"WARNING: the {PATH_TO_LOCK_FILE} file was deleted during"
                + "script execution so something might have gone wrong."
            )


main()
