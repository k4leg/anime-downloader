#!/usr/bin/env python

from argparse import ArgumentParser
import os

from anime_downloader import animevost
from anime_downloader import library
from anime_downloader.exceptions import *


def main():
    args = ArgumentParser(usage='%(prog)s [arguments]')
    args.add_argument(
        '-a', '--add',
        action='store_true',
        help='add a release to the DB'
    )
    args.add_argument(
        '-r', '--remove',
        action='store_true',
        help='remove release from DB'
    )
    args.add_argument(
        '-db', '--path-to-db',
        type=str,
        default=animevost.CONFIG.path_to_db,
        help='configure the path to the DB'
    )
    args.add_argument(
        '-lsdb', '--list-db',
        action='store_true',
        help='print db'
    )
    args.add_argument(
        '-lsrr', '--list-recent-releases',
        action='store_true',
        help='print a list of recent releases (oldest to most recent)'
    )
    args.add_argument(
        '-d', '--download',
        action='store_true',
        help='download episode(s)'
    )
    args.add_argument(
        '-da', '--download-auto',
        action='store_true',
        help='download the latest episodes of releases that have added episodes'
    )
    args.add_argument(
        '-downloads', '--path-to-downloads',
        type=str,
        default=animevost.CONFIG.path_to_downloads,
        help='configure the path to downloads'
    )
    args.add_argument(
        '--mkdir',
        action='store_const',
        const=True,
        help='enable the flag of creating folders before upload'
    )
    args.add_argument(
        '--no-mkdir',
        action='store_const',
        const=False,
        help='disable the flag of creating folders before upload'
    )
    args.add_argument(
        '--save',
        action='store_true',
        help='save settings'
    )
    args = args.parse_args()

    save_flag = args.save
    path_to_db = os.path.expanduser(args.path_to_db)
    if save_flag and path_to_db != animevost.CONFIG.path_to_db:
        animevost.CONFIG.path_to_db = path_to_db

    path_to_downloads = args.path_to_downloads
    if save_flag and path_to_downloads != animevost.CONFIG.path_to_downloads:
        animevost.CONFIG.path_to_downloads = path_to_downloads

    if save_flag:
        animevost.CONFIG.save()

    if args.mkdir is True and args.no_mkdir is False:
        raise UndefinedBehaviorError("both '--mkdir' and '--no-mkdir' are present")

    mkdir = args.mkdir if args.mkdir else args.no_mkdir

    if args.add:
        search_query = input("Enter your search query: ")
        animevost.Animevost(search_query).save_to_db(path_to_db)
    elif args.remove:
        library.print_db(path_to_db)

        release_index_for_delete = int(
            input("Enter the release number you want to remove:")
        ) - 1
        db = library.get_db(path_to_db)
        db[release_index_for_delete].delete_from_db(path_to_db)
    elif args.download:
        library.print_db(path_to_db)

        release_index = int(
            input("Enter the release number for which you want to download the"
                  + " episode(s): ")
        ) - 1
        release_playlist = library.get_db(path_to_db)[release_index].playlist
        episode = input("Enter the episode(s) you want to download: ")
        try:
            episode = int(episode) if episode else None
            if episode is None:
                print("Downloading the latest episode...")
            else:
                print(f"Downloading {episode} episode...")

            if mkdir is None:
                mkdir = False
            release_playlist.download_episode(episode, path_to_downloads, mkdir)
        except ValueError:
            episode_start, episode_stop = [i for i in episode.split(':')]
            episode_start = int(episode_start) if episode_start else None
            episode_stop = int(episode_stop) if episode_stop else None
            if episode_start is None:
                print("Downloading episodes from 1", end='')
            else:
                print(f"Downloading episodes from {episode_start}", end='')
            if episode_stop is None:
                print(" to last...")
            else:
                print(f" to {episode_stop}...")

            if mkdir is None:
                mkdir = True
            release_playlist.download_episodes(
                episode_start,
                episode_stop,
                path_to_downloads,
                mkdir
            )

        print("Download completed.")
    elif args.download_auto:
        library.update_and_save_all_db(path_to_db)
        try:
            updated_releases = library.get_updated_releases_from_db(path_to_db)
        except NoUpdatedReleasesError:
            print("Nothing to do.")
            import sys
            sys.exit()

        for animevost_instance in updated_releases:
            release = animevost_instance.release
            title = release.title
            print(f"Downloading the latest episode of the '{title}' release...")
            animevost_instance.playlist.download_episode()
    elif args.list_db:
        library.print_db(path_to_db)
    elif args.list_recent_releases:
        recent_releases = animevost.get_recent_releases()
        recent_releases.reverse()
        for release in recent_releases:
            title = release.title
            link = release.link
            print(f"{title} ({link})")


try:
    USER = os.getenv('USER')
    LOCK_FILE = f'/tmp/anime-downloader.{USER}.lock'
    if os.path.exists(LOCK_FILE):
        raise AnotherInstanceAlreadyRunError

    open(LOCK_FILE, 'x').close()
    main()
finally:
    try:
        os.remove(LOCK_FILE)
    except FileNotFoundError:
        print(f"WARNING: the {LOCK_FILE} file was deleted during script"
              + " execution, so something might have gone wrong.")
